/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package si_2023_lab2_123085;

import org.junit.Test;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.junit.Assert.*;


class User {
    String username;
    String password;
    String email;

    public User(String username, String password, String email) {
        this.username = username;
        this.password = password;
        this.email = email;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public String getEmail() {
        return email;
    }
}

public class SILab2Tests {

    // Every Branch 

        @Test(expected = RuntimeException.class)
        public void testNullUser() {
            User user = null;
            List<User> allUsers = new ArrayList<>();

            SILab2.function(user, allUsers);
        }

        @Test(expected = RuntimeException.class)
        public void testNullPassword() {
            User user = new User("username", null, "email@test.com");
            List<User> allUsers = new ArrayList<>();

            SILab2.function(user, allUsers);
        }

        @Test(expected = RuntimeException.class)
        public void testNullEmail() {
            User user = new User("username", "password", null);
            List<User> allUsers = new ArrayList<>();

            SILab2.function(user, allUsers);
        }

        @Test
        public void testNullUsername() {
            User user = new User(null, "password", "email@test.com");
            List<User> allUsers = new ArrayList<>();

            SILab2.function(user, allUsers);

            assertEquals(user.getEmail(), user.getUsername());
        }

        @Test
        public void testExistingEmailAndUsername() {
            User user = new User("existingUser", "password", "existing@test.com");
            List<User> allUsers = Arrays.asList(
                    new User("user1", "pass1", "email1@test.com"),
                    new User("user2", "pass2", "email2@test.com"),
                    new User("user3", "pass3", "email3@test.com"),
                    new User("user4", "pass4", "email4@test.com"),
                    new User("existingUser", "pass5", "existing@test.com")
            );

            boolean result = SILab2.function(user, allUsers);
            assertFalse(result);
        }

        @Test
        public void testNewEmailAndUsername() {
            User user = new User("newUser", "password", "new@test.com");
            List<User> allUsers = Arrays.asList(
                    new User("user1", "pass1", "email1@test.com"),
                    new User("user2", "pass2", "email2@test.com"),
                    new User("user3", "pass3", "email3@test.com"),
                    new User("user4", "pass4", "email4@test.com")
            );

            boolean result = SILab2.function(user, allUsers);
            assertTrue(result);
        }

        @Test
        public void testPasswordContainsUsername() {
            User user = new User("username", "pass", "email@test.com");
            List<User> allUsers = new ArrayList<>();

            boolean result = SILab2.function(user, allUsers);
            assertFalse(result);
        }

        @Test
        public void testPasswordWithoutUsernameAndSpecialCharacter() {
            User user = new User("username", "password", "email@test.com");
            List<User> allUsers = Arrays.asList(
                    new User("user1", "pass1", "email1@test.com"),
                    new User("user2", "pass2", "email2@test.com"),
                    new User("user3", "pass3", "email3@test.com"),
                    new User("user4", "pass4", "email4@test.com")
            );

            boolean result = SILab2.function(user, allUsers);
            assertFalse(result);
        }

        @Test
        public void testPasswordWithoutUsernameWithSpecialCharacter() {
            User user = new User("username", "password!", "email@test.com");
            List<User> allUsers = new ArrayList<>();

            boolean result = SILab2.function(user, allUsers);
            assertTrue(result);
        }




// Multiple Condition

    @Test
    void testFunctionWithValidUserAndEmptyUserList() {
        User user = new User("andrej", "Abcdefg123@", "andrej@test.com");
        List<User> allUsers = new ArrayList<>();

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertTrue(result);
    }

    @Test
    void testFunctionWithValidUserAndNonEmptyUserListDifferentUser() {
        User user = new User("andrej", "Abcdefg123@", "andrej@test.com");
        List<User> allUsers = Arrays.asList(new User("jane", "Abcdefg456@", "jane@test.com"));

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertTrue(result);
    }

    @Test
    void testFunctionWithValidUserAndNonEmptyUserListSameEmail() {
        User user = new User("andrej", "Abcdefg123@", "andrej@test.com");
        List<User> allUsers = Arrays.asList(new User("jane", "Abcdefg456@", "andrej@test.com"));

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertFalse(result);
    }

    @Test
    void testFunctionWithValidUserAndNonEmptyUserListSameUsername() {
        User user = new User("andrej", "Abcdefg123@", "andrej@test.com");
        List<User> allUsers = Arrays.asList(new User("andrej", "Abcdefg456@", "jane@test.com"));

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertFalse(result);
    }

    @Test
    void testFunctionWithValidUserAndNonEmptyUserListSameEmailAndUsername() {
        User user = new User("andrej", "Abcdefg123@", "andrej@test.com");
        List<User> allUsers = Arrays.asList(new User("jane", "Abcdefg456@", "andrej@test.com"));

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertFalse(result);
    }

    @Test
    void testFunctionWithUserNullEmail() {
        User user = new User("andrej", "Abcdefg123@", null);
        List<User> allUsers = new ArrayList<>();

        Assertions.assertThrows(RuntimeException.class, () -> SILab2.function(user, allUsers), "Mandatory information missing!");
    }

    @Test
    void testFunctionWithUserNullPassword() {
        User user = new User("andrej", null, "andrej@test.com");
        List<User> allUsers = new ArrayList<>();

        Assertions.assertThrows(RuntimeException.class, () -> SILab2.function(user, allUsers), "Mandatory information missing!");
    }

    @Test
    void testFunctionWithUserNullUsernameAndEmail() {
        User user = new User(null, "Abcdefg123@", null);
        List<User> allUsers = new ArrayList<>();

        Assertions.assertThrows(RuntimeException.class, () -> SILab2.function(user, allUsers), "Mandatory information missing!");
    }

    @Test
    void testFunctionWithPasswordContainingUsername() {
        User user = new User("andrej", "andrej123@", "andrej@test.com");
        List<User> allUsers = new ArrayList<>();

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertFalse(result);
    }

    @Test
    void testFunctionWithShortPassword() {
        User user = new User("andrej", "Abcdefg", "andrej@test.com");
        List<User> allUsers = new ArrayList<>();

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertFalse(result);
    }

    @Test
    void testFunctionWithPasswordWithoutSpecialCharacters() {
        User user = new User("andrej", "Abcdefg123", "andrej@test.com");
        List<User> allUsers = new ArrayList<>();

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertFalse(result);
    }

    @Test
    void testFunctionWithValidPassword() {
        User user = new User("andrej", "Abcdefg123@", "andrej@test.com");
        List<User> allUsers = new ArrayList<>();

        boolean result = SILab2.function(user, allUsers);

        Assertions.assertTrue(result);
    }


}

    
    
